/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface DeathSavingThrow {
    'clearCounts': () => void;
    'maxFailures': number;
    'maxSuccesses': number;
  }
  interface DeathSavingThrowAttributes extends StencilHTMLAttributes {
    'maxFailures'?: number;
    'maxSuccesses'?: number;
  }

  interface CharacterAttribute {
    'attributeCap': number;
    'attributeValue': number;
    'bonusCalculation': Function;
    'name': string;
    'showBonus': boolean;
    'styleType': string;
  }
  interface CharacterAttributeAttributes extends StencilHTMLAttributes {
    'attributeCap'?: number;
    'attributeValue'?: number;
    'bonusCalculation'?: Function;
    'name'?: string;
    'showBonus'?: boolean;
    'styleType'?: string;
  }

  interface CharacterSkill {
    'attributeBonus': number;
    'bonus': number;
    'name': string;
    'proficiencyBonus': number;
    'proficient': boolean;
    'ranks': number;
  }
  interface CharacterSkillAttributes extends StencilHTMLAttributes {
    'attributeBonus'?: number;
    'bonus'?: number;
    'name'?: string;
    'proficiencyBonus'?: number;
    'proficient'?: boolean;
    'ranks'?: number;
  }

  interface RpgEquipmentBox {
    'numGeneric': number;
    'numWeapons': number;
  }
  interface RpgEquipmentBoxAttributes extends StencilHTMLAttributes {
    'numGeneric'?: number;
    'numWeapons'?: number;
  }

  interface RpgEquipmentGeneric {
    'name': string;
    'size': string;
    'startingCount': number;
    'useItem': () => boolean;
    'weight': number;
  }
  interface RpgEquipmentGenericAttributes extends StencilHTMLAttributes {
    'name'?: string;
    'size'?: string;
    'startingCount'?: number;
    'weight'?: number;
  }

  interface RpgEquipmentWeapon {}
  interface RpgEquipmentWeaponAttributes extends StencilHTMLAttributes {}

  interface PointTracker {
    'maximum': number;
    'minimum': number;
    'showIncrementors': boolean;
    'title': string;
  }
  interface PointTrackerAttributes extends StencilHTMLAttributes {
    'maximum'?: number;
    'minimum'?: number;
    'showIncrementors'?: boolean;
    'title'?: string;
  }

  interface RpgWallet {
    /**
    * This is maintained in 2 values to preserve the order.
    */
    'currencies': string[];
    'currencyValues': number[];
    'setCurrencyValue': (nameOrIndex: any, value: any) => void;
  }
  interface RpgWalletAttributes extends StencilHTMLAttributes {
    /**
    * This is maintained in 2 values to preserve the order.
    */
    'currencies'?: string[];
    'currencyValues'?: number[];
  }

  interface EditableNumber {
    'startingValue': number;
  }
  interface EditableNumberAttributes extends StencilHTMLAttributes {
    'onValueChanged'?: (event: CustomEvent) => void;
    'startingValue'?: number;
  }

  interface RpgTextInput {
    'isEditable': boolean;
    'label': string;
    'placeholder': string;
    'showLock': boolean;
    'startingText': string;
    'styleType': string;
  }
  interface RpgTextInputAttributes extends StencilHTMLAttributes {
    'isEditable'?: boolean;
    'label'?: string;
    'placeholder'?: string;
    'showLock'?: boolean;
    'startingText'?: string;
    'styleType'?: string;
  }

  interface MyApp {}
  interface MyAppAttributes extends StencilHTMLAttributes {}
}

declare global {
  interface StencilElementInterfaces {
    'DeathSavingThrow': Components.DeathSavingThrow;
    'CharacterAttribute': Components.CharacterAttribute;
    'CharacterSkill': Components.CharacterSkill;
    'RpgEquipmentBox': Components.RpgEquipmentBox;
    'RpgEquipmentGeneric': Components.RpgEquipmentGeneric;
    'RpgEquipmentWeapon': Components.RpgEquipmentWeapon;
    'PointTracker': Components.PointTracker;
    'RpgWallet': Components.RpgWallet;
    'EditableNumber': Components.EditableNumber;
    'RpgTextInput': Components.RpgTextInput;
    'MyApp': Components.MyApp;
  }

  interface StencilIntrinsicElements {
    'death-saving-throw': Components.DeathSavingThrowAttributes;
    'character-attribute': Components.CharacterAttributeAttributes;
    'character-skill': Components.CharacterSkillAttributes;
    'rpg-equipment-box': Components.RpgEquipmentBoxAttributes;
    'rpg-equipment-generic': Components.RpgEquipmentGenericAttributes;
    'rpg-equipment-weapon': Components.RpgEquipmentWeaponAttributes;
    'point-tracker': Components.PointTrackerAttributes;
    'rpg-wallet': Components.RpgWalletAttributes;
    'editable-number': Components.EditableNumberAttributes;
    'rpg-text-input': Components.RpgTextInputAttributes;
    'my-app': Components.MyAppAttributes;
  }


  interface HTMLDeathSavingThrowElement extends Components.DeathSavingThrow, HTMLStencilElement {}
  var HTMLDeathSavingThrowElement: {
    prototype: HTMLDeathSavingThrowElement;
    new (): HTMLDeathSavingThrowElement;
  };

  interface HTMLCharacterAttributeElement extends Components.CharacterAttribute, HTMLStencilElement {}
  var HTMLCharacterAttributeElement: {
    prototype: HTMLCharacterAttributeElement;
    new (): HTMLCharacterAttributeElement;
  };

  interface HTMLCharacterSkillElement extends Components.CharacterSkill, HTMLStencilElement {}
  var HTMLCharacterSkillElement: {
    prototype: HTMLCharacterSkillElement;
    new (): HTMLCharacterSkillElement;
  };

  interface HTMLRpgEquipmentBoxElement extends Components.RpgEquipmentBox, HTMLStencilElement {}
  var HTMLRpgEquipmentBoxElement: {
    prototype: HTMLRpgEquipmentBoxElement;
    new (): HTMLRpgEquipmentBoxElement;
  };

  interface HTMLRpgEquipmentGenericElement extends Components.RpgEquipmentGeneric, HTMLStencilElement {}
  var HTMLRpgEquipmentGenericElement: {
    prototype: HTMLRpgEquipmentGenericElement;
    new (): HTMLRpgEquipmentGenericElement;
  };

  interface HTMLRpgEquipmentWeaponElement extends Components.RpgEquipmentWeapon, HTMLStencilElement {}
  var HTMLRpgEquipmentWeaponElement: {
    prototype: HTMLRpgEquipmentWeaponElement;
    new (): HTMLRpgEquipmentWeaponElement;
  };

  interface HTMLPointTrackerElement extends Components.PointTracker, HTMLStencilElement {}
  var HTMLPointTrackerElement: {
    prototype: HTMLPointTrackerElement;
    new (): HTMLPointTrackerElement;
  };

  interface HTMLRpgWalletElement extends Components.RpgWallet, HTMLStencilElement {}
  var HTMLRpgWalletElement: {
    prototype: HTMLRpgWalletElement;
    new (): HTMLRpgWalletElement;
  };

  interface HTMLEditableNumberElement extends Components.EditableNumber, HTMLStencilElement {}
  var HTMLEditableNumberElement: {
    prototype: HTMLEditableNumberElement;
    new (): HTMLEditableNumberElement;
  };

  interface HTMLRpgTextInputElement extends Components.RpgTextInput, HTMLStencilElement {}
  var HTMLRpgTextInputElement: {
    prototype: HTMLRpgTextInputElement;
    new (): HTMLRpgTextInputElement;
  };

  interface HTMLMyAppElement extends Components.MyApp, HTMLStencilElement {}
  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };

  interface HTMLElementTagNameMap {
    'death-saving-throw': HTMLDeathSavingThrowElement
    'character-attribute': HTMLCharacterAttributeElement
    'character-skill': HTMLCharacterSkillElement
    'rpg-equipment-box': HTMLRpgEquipmentBoxElement
    'rpg-equipment-generic': HTMLRpgEquipmentGenericElement
    'rpg-equipment-weapon': HTMLRpgEquipmentWeaponElement
    'point-tracker': HTMLPointTrackerElement
    'rpg-wallet': HTMLRpgWalletElement
    'editable-number': HTMLEditableNumberElement
    'rpg-text-input': HTMLRpgTextInputElement
    'my-app': HTMLMyAppElement
  }

  interface ElementTagNameMap {
    'death-saving-throw': HTMLDeathSavingThrowElement;
    'character-attribute': HTMLCharacterAttributeElement;
    'character-skill': HTMLCharacterSkillElement;
    'rpg-equipment-box': HTMLRpgEquipmentBoxElement;
    'rpg-equipment-generic': HTMLRpgEquipmentGenericElement;
    'rpg-equipment-weapon': HTMLRpgEquipmentWeaponElement;
    'point-tracker': HTMLPointTrackerElement;
    'rpg-wallet': HTMLRpgWalletElement;
    'editable-number': HTMLEditableNumberElement;
    'rpg-text-input': HTMLRpgTextInputElement;
    'my-app': HTMLMyAppElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
