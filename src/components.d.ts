/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface CharacterAttribute {
    'attributeCap': number;
    'attributeValue': number;
    'bonusCalculation': Function;
    'name': string;
    'showBonus': boolean;
    'styleType': string;
  }
  interface CharacterSkill {
    'attributeBonus': number;
    'bonus': number;
    'name': string;
    'proficiencyBonus': number;
    'proficient': boolean;
    'ranks': number;
  }
  interface DeathSavingThrow {
    'clearCounts': () => Promise<void>;
    'maxFailures': number;
    'maxSuccesses': number;
  }
  interface EditableNumber {
    'startingValue': number;
  }
  interface MyApp {}
  interface PointTracker {
    'maximum': number;
    'minimum': number;
    'pointTitle': string;
    'showIncrementors': boolean;
  }
  interface RpgEquipmentBox {
    'numGeneric': number;
    'numWeapons': number;
  }
  interface RpgEquipmentGeneric {
    'name': string;
    'openItemField': (fieldIndex?: number) => Promise<void>;
    'size': string;
    'startingCount': number;
    'useItem': () => Promise<boolean>;
    'weight': number;
  }
  interface RpgEquipmentWeapon {}
  interface RpgSpellLine {
    'castSpell': () => Promise<any>;
    'components': string[];
    'spellName': string;
  }
  interface RpgTextInput {
    'closeEditor': () => Promise<void>;
    'isEditable': boolean;
    'label': string;
    'openEditor': () => Promise<void>;
    'placeholder': string;
    'showLock': boolean;
    'startingText': string;
    'styleType': string;
  }
  interface RpgWallet {
    /**
    * This is maintained in 2 values to preserve the order.
    */
    'currencies': string[];
    'currencyValues': number[];
    'setCurrencyValue': (nameOrIndex: any, value: any) => Promise<any>;
  }
}

declare global {


  interface HTMLCharacterAttributeElement extends Components.CharacterAttribute, HTMLStencilElement {}
  var HTMLCharacterAttributeElement: {
    prototype: HTMLCharacterAttributeElement;
    new (): HTMLCharacterAttributeElement;
  };

  interface HTMLCharacterSkillElement extends Components.CharacterSkill, HTMLStencilElement {}
  var HTMLCharacterSkillElement: {
    prototype: HTMLCharacterSkillElement;
    new (): HTMLCharacterSkillElement;
  };

  interface HTMLDeathSavingThrowElement extends Components.DeathSavingThrow, HTMLStencilElement {}
  var HTMLDeathSavingThrowElement: {
    prototype: HTMLDeathSavingThrowElement;
    new (): HTMLDeathSavingThrowElement;
  };

  interface HTMLEditableNumberElement extends Components.EditableNumber, HTMLStencilElement {}
  var HTMLEditableNumberElement: {
    prototype: HTMLEditableNumberElement;
    new (): HTMLEditableNumberElement;
  };

  interface HTMLMyAppElement extends Components.MyApp, HTMLStencilElement {}
  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };

  interface HTMLPointTrackerElement extends Components.PointTracker, HTMLStencilElement {}
  var HTMLPointTrackerElement: {
    prototype: HTMLPointTrackerElement;
    new (): HTMLPointTrackerElement;
  };

  interface HTMLRpgEquipmentBoxElement extends Components.RpgEquipmentBox, HTMLStencilElement {}
  var HTMLRpgEquipmentBoxElement: {
    prototype: HTMLRpgEquipmentBoxElement;
    new (): HTMLRpgEquipmentBoxElement;
  };

  interface HTMLRpgEquipmentGenericElement extends Components.RpgEquipmentGeneric, HTMLStencilElement {}
  var HTMLRpgEquipmentGenericElement: {
    prototype: HTMLRpgEquipmentGenericElement;
    new (): HTMLRpgEquipmentGenericElement;
  };

  interface HTMLRpgEquipmentWeaponElement extends Components.RpgEquipmentWeapon, HTMLStencilElement {}
  var HTMLRpgEquipmentWeaponElement: {
    prototype: HTMLRpgEquipmentWeaponElement;
    new (): HTMLRpgEquipmentWeaponElement;
  };

  interface HTMLRpgSpellLineElement extends Components.RpgSpellLine, HTMLStencilElement {}
  var HTMLRpgSpellLineElement: {
    prototype: HTMLRpgSpellLineElement;
    new (): HTMLRpgSpellLineElement;
  };

  interface HTMLRpgTextInputElement extends Components.RpgTextInput, HTMLStencilElement {}
  var HTMLRpgTextInputElement: {
    prototype: HTMLRpgTextInputElement;
    new (): HTMLRpgTextInputElement;
  };

  interface HTMLRpgWalletElement extends Components.RpgWallet, HTMLStencilElement {}
  var HTMLRpgWalletElement: {
    prototype: HTMLRpgWalletElement;
    new (): HTMLRpgWalletElement;
  };
  interface HTMLElementTagNameMap {
    'character-attribute': HTMLCharacterAttributeElement;
    'character-skill': HTMLCharacterSkillElement;
    'death-saving-throw': HTMLDeathSavingThrowElement;
    'editable-number': HTMLEditableNumberElement;
    'my-app': HTMLMyAppElement;
    'point-tracker': HTMLPointTrackerElement;
    'rpg-equipment-box': HTMLRpgEquipmentBoxElement;
    'rpg-equipment-generic': HTMLRpgEquipmentGenericElement;
    'rpg-equipment-weapon': HTMLRpgEquipmentWeaponElement;
    'rpg-spell-line': HTMLRpgSpellLineElement;
    'rpg-text-input': HTMLRpgTextInputElement;
    'rpg-wallet': HTMLRpgWalletElement;
  }
}

declare namespace LocalJSX {
  interface CharacterAttribute {
    'attributeCap'?: number;
    'attributeValue'?: number;
    'bonusCalculation'?: Function;
    'name'?: string;
    'showBonus'?: boolean;
    'styleType'?: string;
  }
  interface CharacterSkill {
    'attributeBonus'?: number;
    'bonus'?: number;
    'name'?: string;
    'proficiencyBonus'?: number;
    'proficient'?: boolean;
    'ranks'?: number;
  }
  interface DeathSavingThrow {
    'maxFailures'?: number;
    'maxSuccesses'?: number;
  }
  interface EditableNumber {
    'onValueChanged'?: (event: CustomEvent<any>) => void;
    'startingValue'?: number;
  }
  interface MyApp {}
  interface PointTracker {
    'maximum'?: number;
    'minimum'?: number;
    'pointTitle'?: string;
    'showIncrementors'?: boolean;
  }
  interface RpgEquipmentBox {
    'numGeneric'?: number;
    'numWeapons'?: number;
  }
  interface RpgEquipmentGeneric {
    'name'?: string;
    'onReachedEndOfEquipment'?: (event: CustomEvent<any>) => void;
    'size'?: string;
    'startingCount'?: number;
    'weight'?: number;
  }
  interface RpgEquipmentWeapon {}
  interface RpgSpellLine {
    'components'?: string[];
    'onDidCastSpell'?: (event: CustomEvent<any>) => void;
    'spellName'?: string;
  }
  interface RpgTextInput {
    'isEditable'?: boolean;
    'label'?: string;
    'onEditorSelected'?: (event: CustomEvent<any>) => void;
    'placeholder'?: string;
    'showLock'?: boolean;
    'startingText'?: string;
    'styleType'?: string;
  }
  interface RpgWallet {
    /**
    * This is maintained in 2 values to preserve the order.
    */
    'currencies'?: string[];
    'currencyValues'?: number[];
  }

  interface IntrinsicElements {
    'character-attribute': CharacterAttribute;
    'character-skill': CharacterSkill;
    'death-saving-throw': DeathSavingThrow;
    'editable-number': EditableNumber;
    'my-app': MyApp;
    'point-tracker': PointTracker;
    'rpg-equipment-box': RpgEquipmentBox;
    'rpg-equipment-generic': RpgEquipmentGeneric;
    'rpg-equipment-weapon': RpgEquipmentWeapon;
    'rpg-spell-line': RpgSpellLine;
    'rpg-text-input': RpgTextInput;
    'rpg-wallet': RpgWallet;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'character-attribute': LocalJSX.CharacterAttribute & JSXBase.HTMLAttributes<HTMLCharacterAttributeElement>;
      'character-skill': LocalJSX.CharacterSkill & JSXBase.HTMLAttributes<HTMLCharacterSkillElement>;
      'death-saving-throw': LocalJSX.DeathSavingThrow & JSXBase.HTMLAttributes<HTMLDeathSavingThrowElement>;
      'editable-number': LocalJSX.EditableNumber & JSXBase.HTMLAttributes<HTMLEditableNumberElement>;
      'my-app': LocalJSX.MyApp & JSXBase.HTMLAttributes<HTMLMyAppElement>;
      'point-tracker': LocalJSX.PointTracker & JSXBase.HTMLAttributes<HTMLPointTrackerElement>;
      'rpg-equipment-box': LocalJSX.RpgEquipmentBox & JSXBase.HTMLAttributes<HTMLRpgEquipmentBoxElement>;
      'rpg-equipment-generic': LocalJSX.RpgEquipmentGeneric & JSXBase.HTMLAttributes<HTMLRpgEquipmentGenericElement>;
      'rpg-equipment-weapon': LocalJSX.RpgEquipmentWeapon & JSXBase.HTMLAttributes<HTMLRpgEquipmentWeaponElement>;
      'rpg-spell-line': LocalJSX.RpgSpellLine & JSXBase.HTMLAttributes<HTMLRpgSpellLineElement>;
      'rpg-text-input': LocalJSX.RpgTextInput & JSXBase.HTMLAttributes<HTMLRpgTextInputElement>;
      'rpg-wallet': LocalJSX.RpgWallet & JSXBase.HTMLAttributes<HTMLRpgWalletElement>;
    }
  }
}


