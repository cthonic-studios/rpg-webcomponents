{"moduleFile":{"sourceFilePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/5e/death-saving-throw/death-saving-throw.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"death-saving-throw","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/5e/death-saving-throw/death-saving-throw.scss","cmpRelativePath":"./death-saving-throw.scss","originalComponentPath":"./death-saving-throw.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DeathSavingThrow","tags":[{"name":"todo","text":": The dot display could probably be its own sub-component."}],"documentation":"","type":"typeof DeathSavingThrow"},"encapsulationMeta":0,"componentClass":"DeathSavingThrow","membersMeta":{"clearCounts":{"memberType":32,"attribType":{"text":"() => void","optional":false,"required":false,"typeReferences":{}},"jsdoc":{"name":"clearCounts","tags":[],"documentation":"","type":"() => void","returns":{"type":"void","documentation":""},"parameters":[]}},"numSuccesses":{"memberType":16},"numFailures":{"memberType":16},"maxSuccesses":{"memberType":1,"attribName":"max-successes","attribType":{"text":"number","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"maxSuccesses","tags":[],"documentation":"","type":"number","default":"3"}},"maxFailures":{"memberType":1,"attribName":"max-failures","attribType":{"text":"number","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"maxFailures","tags":[],"documentation":"","type":"number","default":"3"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/5e/death-saving-throw/death-saving-throw.js"},"jsText":"/**\r\n * @todo: The dot display could probably be its own sub-component.\r\n */\r\nexport class DeathSavingThrow {\r\n    constructor() {\r\n        this.maxSuccesses = 3;\r\n        this.maxFailures = 3;\r\n        this.numSuccesses = 0;\r\n        this.numFailures = 0;\r\n    }\r\n    clearCounts() {\r\n        this.numSuccesses = 0;\r\n        this.numFailures = 0;\r\n    }\r\n    counterMap(num, tickedNum) {\r\n        let mapArr = new Array(num).fill(false);\r\n        return mapArr.map((_, i) => {\r\n            if (i < tickedNum) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n    decrement(which) {\r\n        if (which === 'success') {\r\n            this.numSuccesses -= 1;\r\n        }\r\n        else {\r\n            this.numFailures -= 1;\r\n        }\r\n        this.checkForImpossibleNumbers();\r\n    }\r\n    increment(which) {\r\n        if (which === 'success') {\r\n            this.numSuccesses += 1;\r\n        }\r\n        else {\r\n            this.numFailures += 1;\r\n        }\r\n        this.checkForImpossibleNumbers();\r\n    }\r\n    checkForImpossibleNumbers() {\r\n        if (this.numSuccesses < 0) {\r\n            this.numSuccesses = 0;\r\n        }\r\n        if (this.numFailures < 0) {\r\n            this.numFailures = 0;\r\n        }\r\n        if (this.numSuccesses > this.maxSuccesses) {\r\n            this.numSuccesses = this.maxSuccesses;\r\n        }\r\n        if (this.numFailures > this.maxFailures) {\r\n            this.numFailures = this.maxFailures;\r\n        }\r\n    }\r\n    render() {\r\n        return (h(\"div\", { class: \"death-saving-throw-container\" },\r\n            h(\"div\", { class: \"counter-container success-counter\" },\r\n                h(\"div\", { class: \"counter-name\" }, \"Successes\"),\r\n                h(\"div\", { class: \"counter-trackers\" },\r\n                    h(\"div\", { class: \"minus-button\" },\r\n                        h(\"button\", { onClick: () => this.decrement('success') }, \"-\")),\r\n                    this.counterMap(this.maxSuccesses, this.numSuccesses).map((v) => {\r\n                        if (v) {\r\n                            return (h(\"span\", { class: \"filled\" }));\r\n                        }\r\n                        return (h(\"span\", { class: \"unfilled\" }));\r\n                    }),\r\n                    h(\"div\", { class: \"plus-button\" },\r\n                        h(\"button\", { onClick: _ => this.increment('success') }, \"+\")))),\r\n            h(\"div\", { class: \"counter-container failure-counter\" },\r\n                h(\"div\", { class: \"counter-name\" }, \"Failures\"),\r\n                h(\"div\", { class: \"counter-trackers\" },\r\n                    h(\"div\", { class: \"minus-button\" },\r\n                        h(\"button\", { onClick: () => this.decrement('failure') }, \"-\")),\r\n                    this.counterMap(this.maxFailures, this.numFailures).map((v) => {\r\n                        if (v) {\r\n                            return (h(\"span\", { class: \"filled\" }));\r\n                        }\r\n                        return (h(\"span\", { class: \"unfilled\" }));\r\n                    }),\r\n                    h(\"div\", { class: \"plus-button\" },\r\n                        h(\"button\", { onClick: _ => this.increment('failure') }, \"+\")))),\r\n            h(\"h2\", null, \"Death Saves\")));\r\n    }\r\n    static get is() { return \"death-saving-throw\"; }\r\n    static get properties() { return {\r\n        \"clearCounts\": {\r\n            \"method\": true\r\n        },\r\n        \"maxFailures\": {\r\n            \"type\": Number,\r\n            \"attr\": \"max-failures\"\r\n        },\r\n        \"maxSuccesses\": {\r\n            \"type\": Number,\r\n            \"attr\": \"max-successes\"\r\n        },\r\n        \"numFailures\": {\r\n            \"state\": true\r\n        },\r\n        \"numSuccesses\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:death-saving-throw:**/\"; }\r\n}\r\n"}