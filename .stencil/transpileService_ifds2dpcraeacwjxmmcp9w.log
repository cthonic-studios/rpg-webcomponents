{"moduleFile":{"sourceFilePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/common/editable-number/editable-number.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"editable-number","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/common/editable-number/editable-number.scss","cmpRelativePath":"editable-number.scss","originalComponentPath":"editable-number.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"EditableNumber","tags":[],"documentation":"","type":"typeof EditableNumber"},"encapsulationMeta":0,"componentClass":"EditableNumber","membersMeta":{"el":{"memberType":64},"currentValue":{"memberType":16},"isEditable":{"memberType":16},"startingValue":{"memberType":1,"attribName":"starting-value","attribType":{"text":"number","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"startingValue","tags":[],"documentation":"","type":"number"},"watchCallbacks":["svChange"]}},"eventsMeta":[{"eventMethodName":"valueChanged","eventName":"valueChanged","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"jsdoc":{"name":"valueChanged","tags":[],"documentation":"","type":"EventEmitter<any>"}}],"listenersMeta":[{"eventName":"rpg_setvalue","eventMethodName":"setValueEvent","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"setValueEvent","tags":[],"documentation":"","type":"(event: CustomEvent<any>) => void"}},{"eventName":"keyup.escape","eventMethodName":"closeEditor","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"closeEditor","tags":[],"documentation":"","type":"() => void"}},{"eventName":"keyup.enter","eventMethodName":"closeEditor","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"closeEditor","tags":[],"documentation":"","type":"() => void"}},{"eventName":"closeEditor","eventMethodName":"closeEditor","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"closeEditor","tags":[],"documentation":"","type":"() => void"}}]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/common/editable-number/editable-number.js"},"jsText":"export class EditableNumber {\r\n    constructor() {\r\n        this.isEditable = false;\r\n    }\r\n    setValueEvent(event) {\r\n        if (event.detail) {\r\n            this.setValue(event.detail);\r\n        }\r\n    }\r\n    closeEditor() {\r\n        if (this.isEditable) {\r\n            this.isEditable = false;\r\n        }\r\n    }\r\n    componentWillLoad() {\r\n        this.currentValue = this.startingValue;\r\n    }\r\n    svChange(newValue) {\r\n        this.setValue(newValue, false);\r\n    }\r\n    setValue(val, emit = true) {\r\n        this.currentValue = parseInt(val);\r\n        if (emit) {\r\n            this.valueChanged.emit(this.currentValue);\r\n        }\r\n    }\r\n    clickToEdit(event) {\r\n        if (event.target.tagName == 'INPUT') {\r\n            return;\r\n        }\r\n        this.isEditable = !this.isEditable;\r\n        // This is so the input will exist (could also do it in componentDidUpdate?)\r\n        if (this.isEditable) {\r\n            setTimeout(() => {\r\n                this.el.querySelector('input').focus();\r\n            }, 0);\r\n        }\r\n    }\r\n    render() {\r\n        return (h(\"div\", { class: \"editable-number-container\", onClick: (event) => this.clickToEdit(event) }, !this.isEditable\r\n            ? h(\"span\", { id: \"counterValue\", class: \"counter-value\" }, this.currentValue)\r\n            : h(\"input\", { class: \"enter-counter-value\", value: this.currentValue, onChange: (event) => this.setValue(event.target.value) })));\r\n    }\r\n    static get is() { return \"editable-number\"; }\r\n    static get properties() { return {\r\n        \"currentValue\": {\r\n            \"state\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"isEditable\": {\r\n            \"state\": true\r\n        },\r\n        \"startingValue\": {\r\n            \"type\": Number,\r\n            \"attr\": \"starting-value\",\r\n            \"watchCallbacks\": [\"svChange\"]\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"valueChanged\",\r\n            \"method\": \"valueChanged\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get listeners() { return [{\r\n            \"name\": \"rpg_setvalue\",\r\n            \"method\": \"setValueEvent\"\r\n        }, {\r\n            \"name\": \"keyup.escape\",\r\n            \"method\": \"closeEditor\"\r\n        }, {\r\n            \"name\": \"keyup.enter\",\r\n            \"method\": \"closeEditor\"\r\n        }, {\r\n            \"name\": \"closeEditor\",\r\n            \"method\": \"closeEditor\"\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:editable-number:**/\"; }\r\n}\r\n"}