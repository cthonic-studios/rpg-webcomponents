{"moduleFile":{"sourceFilePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/common/text-input/text-input.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"rpg-text-input","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/common/text-input/text-input.scss","cmpRelativePath":"./text-input.scss","originalComponentPath":"./text-input.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"RpgTextInput","tags":[],"documentation":"","type":"typeof RpgTextInput"},"encapsulationMeta":0,"componentClass":"RpgTextInput","membersMeta":{"el":{"memberType":64},"isLocked":{"memberType":16},"inEditMode":{"memberType":16},"text":{"memberType":16},"label":{"memberType":1,"attribName":"label","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"label","tags":[],"documentation":"","type":"string"}},"isEditable":{"memberType":1,"attribName":"is-editable","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"isEditable","tags":[],"documentation":"","type":"boolean","default":"true"}},"showLock":{"memberType":1,"attribName":"show-lock","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"showLock","tags":[],"documentation":"","type":"boolean","default":"true"}},"placeholder":{"memberType":1,"attribName":"placeholder","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"placeholder","tags":[],"documentation":"","type":"string"}},"startingText":{"memberType":1,"attribName":"starting-text","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"startingText","tags":[],"documentation":"","type":"string"}},"styleType":{"memberType":1,"attribName":"style-type","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"styleType","tags":[],"documentation":"","type":"string","default":"'inline'"}}},"eventsMeta":[],"listenersMeta":[{"eventName":"keyup.escape","eventMethodName":"closeEditor","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"closeEditor","tags":[],"documentation":"","type":"() => void"}},{"eventName":"keyup.enter","eventMethodName":"closeEditor","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"closeEditor","tags":[],"documentation":"","type":"() => void"}},{"eventName":"closeEditor","eventMethodName":"closeEditor","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"closeEditor","tags":[],"documentation":"","type":"() => void"}}]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/common/text-input/text-input.js"},"jsText":"export class RpgTextInput {\r\n    constructor() {\r\n        this.isEditable = true;\r\n        this.showLock = true;\r\n        this.styleType = 'inline';\r\n        this.isLocked = false;\r\n        this.inEditMode = false;\r\n    }\r\n    closeEditor() {\r\n        if (this.inEditMode) {\r\n            this.inEditMode = false;\r\n        }\r\n    }\r\n    componentWillLoad() {\r\n        this.text = this.startingText;\r\n    }\r\n    clickToEdit(event) {\r\n        if (!this.isEditable || this.isLocked) {\r\n            return;\r\n        }\r\n        if (event.target.tagName == 'INPUT') {\r\n            return;\r\n        }\r\n        this.inEditMode = !this.inEditMode;\r\n        // This is so the input will exist (could also do it in componentDidUpdate?)\r\n        if (this.inEditMode) {\r\n            setTimeout(() => {\r\n                this.el.querySelector('input').focus();\r\n            }, 0);\r\n        }\r\n    }\r\n    textChanged(event) {\r\n        this.text = event.target.value;\r\n        const tEvent = new CustomEvent('rpg_text_changed', { detail: {\r\n                newText: this.text\r\n            } });\r\n        this.el.dispatchEvent(tEvent);\r\n    }\r\n    render() {\r\n        return (h(\"div\", { class: this.styleType, onClick: (ev) => this.clickToEdit(ev) },\r\n            h(\"label\", { htmlFor: \"rpgInput\" }, this.label),\r\n            this.inEditMode ?\r\n                h(\"span\", null,\r\n                    h(\"input\", { type: \"text\", id: \"rpgInput\", placeholder: this.placeholder, value: this.text, onChange: (ev) => this.textChanged(ev) }))\r\n                :\r\n                    h(\"span\", { class: \"text\" }, this.text)));\r\n    }\r\n    static get is() { return \"rpg-text-input\"; }\r\n    static get properties() { return {\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"inEditMode\": {\r\n            \"state\": true\r\n        },\r\n        \"isEditable\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"is-editable\"\r\n        },\r\n        \"isLocked\": {\r\n            \"state\": true\r\n        },\r\n        \"label\": {\r\n            \"type\": String,\r\n            \"attr\": \"label\"\r\n        },\r\n        \"placeholder\": {\r\n            \"type\": String,\r\n            \"attr\": \"placeholder\"\r\n        },\r\n        \"showLock\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"show-lock\"\r\n        },\r\n        \"startingText\": {\r\n            \"type\": String,\r\n            \"attr\": \"starting-text\"\r\n        },\r\n        \"styleType\": {\r\n            \"type\": String,\r\n            \"attr\": \"style-type\"\r\n        },\r\n        \"text\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n    static get listeners() { return [{\r\n            \"name\": \"keyup.escape\",\r\n            \"method\": \"closeEditor\"\r\n        }, {\r\n            \"name\": \"keyup.enter\",\r\n            \"method\": \"closeEditor\"\r\n        }, {\r\n            \"name\": \"closeEditor\",\r\n            \"method\": \"closeEditor\"\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:rpg-text-input:**/\"; }\r\n}\r\n"}