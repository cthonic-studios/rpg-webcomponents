const t=window.App.h;class e{constructor(){this.isEditable=!0,this.showLock=!0,this.styleType="inline",this.isLocked=!1,this.inEditMode=!1}closeEditor(){this.inEditMode&&(this.inEditMode=!1)}componentWillLoad(){this.text=this.startingText}clickToEdit(t){this.isEditable&&!this.isLocked&&"INPUT"!=t.target.tagName&&(this.inEditMode=!this.inEditMode,this.inEditMode&&setTimeout(()=>{this.el.querySelector("input").focus()},0))}textChanged(t){this.text=t.target.value;const e=new CustomEvent("rpg_text_changed",{detail:{newText:this.text}});this.el.dispatchEvent(e)}render(){return t("div",{class:this.styleType,onClick:t=>this.clickToEdit(t)},t("label",{htmlFor:"rpgInput"},this.label),this.inEditMode?t("span",null,t("input",{type:"text",id:"rpgInput",placeholder:this.placeholder,value:this.text,onChange:t=>this.textChanged(t)})):t("span",{class:"text"},this.text))}static get is(){return"rpg-text-input"}static get properties(){return{el:{elementRef:!0},inEditMode:{state:!0},isEditable:{type:Boolean,attr:"is-editable"},isLocked:{state:!0},label:{type:String,attr:"label"},placeholder:{type:String,attr:"placeholder"},showLock:{type:Boolean,attr:"show-lock"},startingText:{type:String,attr:"starting-text"},styleType:{type:String,attr:"style-type"},text:{state:!0}}}static get listeners(){return[{name:"keyup.escape",method:"closeEditor"},{name:"keyup.enter",method:"closeEditor"},{name:"closeEditor",method:"closeEditor"}]}static get style(){return"/**style-placeholder:rpg-text-input:**/"}}export{e as RpgTextInput};