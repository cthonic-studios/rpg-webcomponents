{"moduleFile":{"sourceFilePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/character-sheet/point-tracker/point-tracker.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[{"tag":"editable-number"}],"cmpMeta":{"tagNameMeta":"point-tracker","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/character-sheet/point-tracker/point-tracker.scss","cmpRelativePath":"point-tracker.scss","originalComponentPath":"point-tracker.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"PointTracker","tags":[],"documentation":"","type":"typeof PointTracker"},"encapsulationMeta":0,"componentClass":"PointTracker","membersMeta":{"el":{"memberType":64},"currentValue":{"memberType":16},"isEditable":{"memberType":16},"title":{"memberType":1,"attribName":"title","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"title","tags":[],"documentation":"","type":"string"}},"maximum":{"memberType":1,"attribName":"maximum","attribType":{"text":"number","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"maximum","tags":[],"documentation":"","type":"number"},"watchCallbacks":["setMaximum"]},"minimum":{"memberType":1,"attribName":"minimum","attribType":{"text":"number","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"minimum","tags":[],"documentation":"","type":"number","default":"0"}},"showIncrementors":{"memberType":1,"attribName":"show-incrementors","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"showIncrementors","tags":[],"documentation":"","type":"boolean","default":"true"}}},"eventsMeta":[],"listenersMeta":[{"eventName":"rpg_resetvalue","eventMethodName":"resetCounter","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"resetCounter","tags":[],"documentation":"","type":"() => void"}},{"eventName":"rpg_setvalue","eventMethodName":"setValueFromEvent","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"setValueFromEvent","tags":[{"name":"todo","text":"- This Might be better as a prop that can be externally altered\nOr maybe as both? Not sure."},{"name":"param","text":"event"}],"documentation":"","type":"(event: CustomEvent<any>) => void"}},{"eventName":"keyup.escape","eventMethodName":"closeEditor","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"closeEditor","tags":[],"documentation":"","type":"() => void"}},{"eventName":"keyup.enter","eventMethodName":"closeEditor","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"closeEditor","tags":[],"documentation":"","type":"() => void"}},{"eventName":"valueChanged","eventMethodName":"valueChanged","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"valueChanged","tags":[],"documentation":"","type":"(event: CustomEvent<any>) => void"}}]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/ec2-user/environment/rpg-webcomponents/src/components/character-sheet/point-tracker/point-tracker.js"},"jsText":"export class PointTracker {\r\n    constructor() {\r\n        this.minimum = 0;\r\n        this.showIncrementors = true;\r\n        this.isEditable = false;\r\n    }\r\n    resetCounter() {\r\n        this.currentValue = this.maximum;\r\n        this.setValue(this.currentValue);\r\n    }\r\n    setValueFromEvent(event) {\r\n        if (event.detail) {\r\n            this.setValue(event.detail);\r\n        }\r\n    }\r\n    closeEditor() {\r\n        if (this.isEditable) {\r\n            this.isEditable = false;\r\n        }\r\n    }\r\n    valueChanged(event) {\r\n        if (this.currentValue != event.detail) {\r\n            this.currentValue = event.detail;\r\n        }\r\n    }\r\n    setMaximum(value) {\r\n        this.maximum = parseInt(value);\r\n        this.setValue(this.maximum);\r\n    }\r\n    componentWillLoad() {\r\n        this.currentValue = this.maximum;\r\n    }\r\n    setValue(val) {\r\n        let event = new CustomEvent('rpg_setvalue', { detail: val });\r\n        this.el.querySelector('editable-number').dispatchEvent(event);\r\n    }\r\n    decrement() {\r\n        this.currentValue -= 1;\r\n        if (this.currentValue <= this.minimum) {\r\n            this.currentValue = this.minimum;\r\n        }\r\n        this.setValue(this.currentValue);\r\n    }\r\n    increment() {\r\n        this.currentValue += 1;\r\n        if (this.currentValue >= this.maximum) {\r\n            this.currentValue = this.maximum;\r\n        }\r\n        this.setValue(this.currentValue);\r\n    }\r\n    render() {\r\n        return (h(\"div\", { class: \"container\" },\r\n            h(\"h2\", null, this.title),\r\n            h(\"editable-number\", { startingValue: this.currentValue }),\r\n            this.showIncrementors ?\r\n                h(\"div\", { class: \"button-container\" },\r\n                    h(\"button\", { class: \"button-left\", onClick: () => this.decrement() }, \"-\"),\r\n                    h(\"button\", { class: \"button-right\", onClick: () => this.increment() }, \"+\"))\r\n                :\r\n                    \"\"));\r\n    }\r\n    static get is() { return \"point-tracker\"; }\r\n    static get properties() { return {\r\n        \"currentValue\": {\r\n            \"state\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"isEditable\": {\r\n            \"state\": true\r\n        },\r\n        \"maximum\": {\r\n            \"type\": Number,\r\n            \"attr\": \"maximum\",\r\n            \"watchCallbacks\": [\"setMaximum\"]\r\n        },\r\n        \"minimum\": {\r\n            \"type\": Number,\r\n            \"attr\": \"minimum\"\r\n        },\r\n        \"showIncrementors\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"show-incrementors\"\r\n        },\r\n        \"title\": {\r\n            \"type\": String,\r\n            \"attr\": \"title\"\r\n        }\r\n    }; }\r\n    static get listeners() { return [{\r\n            \"name\": \"rpg_resetvalue\",\r\n            \"method\": \"resetCounter\"\r\n        }, {\r\n            \"name\": \"rpg_setvalue\",\r\n            \"method\": \"setValueFromEvent\"\r\n        }, {\r\n            \"name\": \"keyup.escape\",\r\n            \"method\": \"closeEditor\"\r\n        }, {\r\n            \"name\": \"keyup.enter\",\r\n            \"method\": \"closeEditor\"\r\n        }, {\r\n            \"name\": \"valueChanged\",\r\n            \"method\": \"valueChanged\"\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:point-tracker:**/\"; }\r\n}\r\n"}