import { h } from '../app.core.js';
var CharacterAttribute = /** @class */ (function () {
    function CharacterAttribute() {
        this.showBonus = true;
        this.styleType = 'vertical';
        this.isEditable = false;
        this.bonus = 0;
    }
    CharacterAttribute.prototype.attrValueChanged = function (newValue) {
        this.setValue(parseInt(newValue));
    };
    CharacterAttribute.prototype.setValueFromEvent = function (event) {
        if (event.detail) {
            this.setValue(event.detail);
        }
    };
    CharacterAttribute.prototype.clearBonus = function () {
        this.setBonus(0);
    };
    CharacterAttribute.prototype.attributeDamageOrBonus = function (event) {
        var newBonus;
        if (event.type === 'attributeBonus') {
            newBonus = this.bonus + event.detail;
        }
        else {
            newBonus = this.bonus - event.detail;
        }
        this.setBonus(newBonus);
    };
    CharacterAttribute.prototype.setBonus = function (value) {
        this.bonus = value;
        if (this.bonus > 0) {
            this.el.classList.add('is-boosted');
        }
        else {
            this.el.classList.remove('is-boosted');
        }
        if (this.bonus < 0) {
            this.el.classList.add('is-penalized');
        }
        else {
            this.el.classList.remove('is-penalized');
        }
        this.setValue(this.currentAttrValue + this.bonus);
    };
    CharacterAttribute.prototype.valueChanged = function (event) {
        var newVal = event.detail;
        if (this.currentAttrValue != newVal) {
            if (this.attributeCap && newVal > this.attributeCap) {
                newVal = this.attributeCap;
                return this.setValue(newVal);
            }
            this.currentAttrValue = newVal;
            this.bonus = this.calculateBonus();
        }
    };
    CharacterAttribute.prototype.componentWillLoad = function () {
        this.styleClass = "character-attribute-" + this.styleType;
        this.currentAttrValue = this.attributeValue;
        this.bonus = this.calculateBonus();
    };
    CharacterAttribute.prototype.calculateBonus = function () {
        if (this.bonusCalculation) {
            return this.bonusCalculation(this.currentAttrValue);
        }
        return Math.floor(this.currentAttrValue / 2) - 5;
    };
    CharacterAttribute.prototype.setValue = function (value) {
        this.currentAttrValue = value;
        this.bonus = this.calculateBonus();
        var event = new CustomEvent('rpg_setvalue', { detail: this.currentAttrValue });
        this.el.querySelector('editable-number').dispatchEvent(event);
    };
    CharacterAttribute.prototype.clickToEdit = function (event) {
        var _this = this;
        if (event.target.tagName == 'INPUT') {
            return;
        }
        this.isEditable = !this.isEditable;
        if (this.isEditable) {
            setTimeout(function () {
                _this.el.querySelector('input').focus();
            }, 0);
        }
    };
    CharacterAttribute.prototype.render = function () {
        return (h("div", { class: "character-attribute-container " + this.styleClass }, h("div", { class: "attribute-name" }, this.name), h("editable-number", { startingValue: this.currentAttrValue }), this.showBonus ?
            h("div", { class: "attribute-bonus-container" }, this.bonus)
            :
                ""));
    };
    Object.defineProperty(CharacterAttribute, "is", {
        get: function () { return "character-attribute"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CharacterAttribute, "properties", {
        get: function () {
            return {
                "attributeCap": {
                    "type": Number,
                    "attr": "attribute-cap"
                },
                "attributeValue": {
                    "type": Number,
                    "attr": "attribute-value",
                    "watchCallbacks": ["attrValueChanged"]
                },
                "bonus": {
                    "state": true
                },
                "bonusCalculation": {
                    "type": "Any",
                    "attr": "bonus-calculation"
                },
                "currentAttrValue": {
                    "state": true
                },
                "el": {
                    "elementRef": true
                },
                "isEditable": {
                    "state": true
                },
                "name": {
                    "type": String,
                    "attr": "name"
                },
                "showBonus": {
                    "type": Boolean,
                    "attr": "show-bonus"
                },
                "styleType": {
                    "type": String,
                    "attr": "style-type"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CharacterAttribute, "listeners", {
        get: function () {
            return [{
                    "name": "rpg_setvalue",
                    "method": "setValueFromEvent"
                }, {
                    "name": "clearBonus",
                    "method": "clearBonus"
                }, {
                    "name": "attributeDamage",
                    "method": "attributeDamageOrBonus"
                }, {
                    "name": "attributeBonus",
                    "method": "attributeDamageOrBonus"
                }, {
                    "name": "valueChanged",
                    "method": "valueChanged"
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CharacterAttribute, "style", {
        get: function () { return "/**style-placeholder:character-attribute:**/"; },
        enumerable: true,
        configurable: true
    });
    return CharacterAttribute;
}());
var CharacterSkill = /** @class */ (function () {
    function CharacterSkill() {
        this.proficiencyBonus = 2;
        this.ranks = 0;
        this.bonus = 0;
        this.attributeBonus = 0;
        this.currentBonus = 0;
    }
    CharacterSkill.prototype.componentWillLoad = function () {
        this.isProficient = this.proficient;
    };
    CharacterSkill.prototype.componentDidLoad = function () {
        this.renderProficiency();
        this.recalculateCurrentBonus();
    };
    CharacterSkill.prototype.setRanks = function (event) {
        this.ranks = event.detail;
        this.recalculateCurrentBonus();
    };
    CharacterSkill.prototype.setAttributeBonus = function (event) {
        this.attributeBonus = event.detail;
        this.recalculateCurrentBonus();
    };
    CharacterSkill.prototype.setBonus = function (event) {
        this.bonus = event.detail;
        this.recalculateCurrentBonus();
    };
    CharacterSkill.prototype.toggleProficient = function () {
        this.isProficient = !this.isProficient;
        console.log(this.isProficient);
        this.renderProficiency();
        this.recalculateCurrentBonus();
    };
    CharacterSkill.prototype.recalculateCurrentBonus = function () {
        var bonus = this.bonus + this.attributeBonus + this.ranks;
        if (this.proficient) {
            bonus += this.proficiencyBonus;
        }
        this.currentBonus = bonus;
    };
    CharacterSkill.prototype.renderProficiency = function () {
        var span = this.el.querySelector('#isProficient');
        if (!span) {
            return;
        }
        if (this.isProficient) {
            span.classList.add('proficient');
        }
        else {
            span.classList.remove('proficient');
        }
    };
    CharacterSkill.prototype.render = function () {
        var _this = this;
        return (h("div", null, h("div", { class: "is-proficient" }, h("span", { id: "isProficient", onClick: function () { return _this.toggleProficient(); } })), h("div", { class: "current-bonus" }, this.currentBonus), h("div", { class: "name" }, this.name)));
    };
    Object.defineProperty(CharacterSkill, "is", {
        get: function () { return "character-skill"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CharacterSkill, "properties", {
        get: function () {
            return {
                "attributeBonus": {
                    "type": Number,
                    "attr": "attribute-bonus"
                },
                "bonus": {
                    "type": Number,
                    "attr": "bonus"
                },
                "currentBonus": {
                    "state": true
                },
                "el": {
                    "elementRef": true
                },
                "isProficient": {
                    "state": true
                },
                "name": {
                    "type": String,
                    "attr": "name"
                },
                "proficiencyBonus": {
                    "type": Number,
                    "attr": "proficiency-bonus"
                },
                "proficient": {
                    "type": Boolean,
                    "attr": "proficient"
                },
                "ranks": {
                    "type": Number,
                    "attr": "ranks"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CharacterSkill, "listeners", {
        get: function () {
            return [{
                    "name": "setRanks",
                    "method": "setRanks"
                }, {
                    "name": "setAttributeBonus",
                    "method": "setAttributeBonus"
                }, {
                    "name": "setBonus",
                    "method": "setBonus"
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CharacterSkill, "style", {
        get: function () { return "/**style-placeholder:character-skill:**/"; },
        enumerable: true,
        configurable: true
    });
    return CharacterSkill;
}());
var DeathSavingThrow = /** @class */ (function () {
    function DeathSavingThrow() {
        this.maxSuccesses = 3;
        this.maxFailures = 3;
        this.numSuccesses = 0;
        this.numFailures = 0;
    }
    DeathSavingThrow.prototype.clearCounts = function () {
        this.numSuccesses = 0;
        this.numFailures = 0;
    };
    DeathSavingThrow.prototype.counterMap = function (num, tickedNum) {
        var mapArr = new Array(num).fill(false);
        return mapArr.map(function (_, i) {
            if (i < tickedNum) {
                return true;
            }
            return false;
        });
    };
    DeathSavingThrow.prototype.decrement = function (which) {
        if (which === 'success') {
            this.numSuccesses -= 1;
        }
        else {
            this.numFailures -= 1;
        }
        this.checkForImpossibleNumbers();
    };
    DeathSavingThrow.prototype.increment = function (which) {
        if (which === 'success') {
            this.numSuccesses += 1;
        }
        else {
            this.numFailures += 1;
        }
        this.checkForImpossibleNumbers();
    };
    DeathSavingThrow.prototype.checkForImpossibleNumbers = function () {
        if (this.numSuccesses < 0) {
            this.numSuccesses = 0;
        }
        if (this.numFailures < 0) {
            this.numFailures = 0;
        }
        if (this.numSuccesses > this.maxSuccesses) {
            this.numSuccesses = this.maxSuccesses;
        }
        if (this.numFailures > this.maxFailures) {
            this.numFailures = this.maxFailures;
        }
    };
    DeathSavingThrow.prototype.render = function () {
        var _this = this;
        return (h("div", { class: "death-saving-throw-container" }, h("div", { class: "counter-container success-counter" }, h("div", { class: "counter-name" }, "Successes"), h("div", { class: "counter-trackers" }, h("div", { class: "minus-button" }, h("button", { onClick: function () { return _this.decrement('success'); } }, "-")), this.counterMap(this.maxSuccesses, this.numSuccesses).map(function (v) {
            if (v) {
                return (h("span", { class: "filled" }));
            }
            return (h("span", { class: "unfilled" }));
        }), h("div", { class: "plus-button" }, h("button", { onClick: function (_) { return _this.increment('success'); } }, "+")))), h("div", { class: "counter-container failure-counter" }, h("div", { class: "counter-name" }, "Failures"), h("div", { class: "counter-trackers" }, h("div", { class: "minus-button" }, h("button", { onClick: function () { return _this.decrement('failure'); } }, "-")), this.counterMap(this.maxFailures, this.numFailures).map(function (v) {
            if (v) {
                return (h("span", { class: "filled" }));
            }
            return (h("span", { class: "unfilled" }));
        }), h("div", { class: "plus-button" }, h("button", { onClick: function (_) { return _this.increment('failure'); } }, "+")))), h("h2", null, "Death Saves")));
    };
    Object.defineProperty(DeathSavingThrow, "is", {
        get: function () { return "death-saving-throw"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeathSavingThrow, "properties", {
        get: function () {
            return {
                "clearCounts": {
                    "method": true
                },
                "maxFailures": {
                    "type": Number,
                    "attr": "max-failures"
                },
                "maxSuccesses": {
                    "type": Number,
                    "attr": "max-successes"
                },
                "numFailures": {
                    "state": true
                },
                "numSuccesses": {
                    "state": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeathSavingThrow, "style", {
        get: function () { return "/**style-placeholder:death-saving-throw:**/"; },
        enumerable: true,
        configurable: true
    });
    return DeathSavingThrow;
}());
var MyApp = /** @class */ (function () {
    function MyApp() {
    }
    MyApp.prototype.resetCounter = function (id) {
        document.getElementById(id).dispatchEvent(new CustomEvent('rpg_resetvalue'));
    };
    MyApp.prototype.counterSetDemo = function () {
        var track = document.querySelector('#hpTracker');
        console.log(track);
        track.maximum = "100";
    };
    MyApp.prototype.addBonusToStrength = function () {
        document.querySelector('#strength').dispatchEvent(new CustomEvent('attributeBonus', { detail: 2 }));
    };
    MyApp.prototype.gimmeGold = function () {
        var wallet = document.querySelector('#wallet');
        wallet.setCurrencyValue('GP', 200);
    };
    MyApp.prototype.render = function () {
        var _this = this;
        return (h("div", null, h("header", null, h("h1", null, "RPG Components Example")), h("main", null, h("div", { class: "intro" }, h("div", { class: "intro-container" }, h("rpg-text-input", { label: "Name", "starting-text": "cthos", placeholder: "name", "style-type": "underneath" })), h("div", { class: "intro-container" }, h("rpg-text-input", { label: "Class & Level", "style-type": "underneath" }), h("rpg-text-input", { label: "Background", "style-type": "underneath" }), h("rpg-text-input", { label: "Player Name", "style-type": "underneath" }), h("rpg-text-input", { label: "Race", "style-type": "underneath" }), h("rpg-text-input", { label: "Alignment", "style-type": "underneath" }), h("rpg-text-input", { label: "Experience Points", "style-type": "underneath" }))), h("div", { class: "attributes" }, h("character-attribute", { id: "strength", name: "Strength", "attribute-value": 10 }), h("character-attribute", { name: "Dexterity", "attribute-value": 18 }), h("character-attribute", { name: "Constitution", "attribute-value": 8 }), h("character-attribute", { name: "Intelligence", "attribute-value": 12 }), h("character-attribute", { name: "Wisdom", "attribute-value": 10 }), h("character-attribute", { name: "Charisma", "attribute-value": 16 })), h("div", { class: "point-example" }, h("div", { class: "pointtrack" }, h("point-tracker", { id: "manaTracker", title: "MP", maximum: 30 }), h("point-tracker", { id: "ac", title: "AC", maximum: 14, "show-incrementors": false })), h("div", { class: "hit-point-box" }, h("rpg-text-input", { label: "Hit Point Maximum", "style-type": "inline" }), h("point-tracker", { id: "hpTracker", maximum: 10 })), h("div", { class: "skill-list" }, h("character-skill", { name: "Acrobatics", proficient: true }), h("character-skill", { name: "Animal Handling", proficient: true }), h("character-skill", { name: "Arcana", proficient: true }), h("character-skill", { name: "Athletics", proficient: true }), h("character-skill", { name: "Deception", proficient: true }), h("character-skill", { name: "Knowledge (History)", proficient: true })), h("div", { class: "wallet" }, h("rpg-wallet", { id: "wallet", currencies: ['GP', 'SP', 'CP'], currencyValues: [100, 57, 99] })), h("div", { class: "death-saving-throw" }, h("death-saving-throw", null))), h("div", { class: "equipment-container" }, h("rpg-equipment-box", null)), h("div", { class: "utility-container" }, h("button", { type: "button", onClick: function () { return _this.resetCounter('hpTracker'); } }, "Reset HP Count"), h("button", { type: "button", onClick: function () { return _this.resetCounter('manaTracker'); } }, "Reset MP Count"), h("button", { type: "button", onClick: function () { return _this.counterSetDemo(); } }, "Set HP to 100"), h("button", { type: "button", onClick: function () { return _this.addBonusToStrength(); } }, "+2 to STR"), h("button", { type: "button", onClick: function () { return _this.gimmeGold(); } }, "Gain Gold")))));
    };
    Object.defineProperty(MyApp, "is", {
        get: function () { return "my-app"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MyApp, "style", {
        get: function () { return "/**style-placeholder:my-app:**/"; },
        enumerable: true,
        configurable: true
    });
    return MyApp;
}());
var PointTracker = /** @class */ (function () {
    function PointTracker() {
        this.minimum = 0;
        this.showIncrementors = true;
        this.isEditable = false;
    }
    PointTracker.prototype.resetCounter = function () {
        this.currentValue = this.maximum;
        this.setValue(this.currentValue);
    };
    PointTracker.prototype.setValueFromEvent = function (event) {
        if (event.detail) {
            this.setValue(event.detail);
        }
    };
    PointTracker.prototype.closeEditor = function () {
        if (this.isEditable) {
            this.isEditable = false;
        }
    };
    PointTracker.prototype.valueChanged = function (event) {
        if (this.currentValue != event.detail) {
            this.currentValue = event.detail;
        }
    };
    PointTracker.prototype.setMaximum = function (value) {
        this.maximum = parseInt(value);
        this.setValue(this.maximum);
    };
    PointTracker.prototype.componentWillLoad = function () {
        this.currentValue = this.maximum;
    };
    PointTracker.prototype.setValue = function (val) {
        var event = new CustomEvent('rpg_setvalue', { detail: val });
        this.el.querySelector('editable-number').dispatchEvent(event);
    };
    PointTracker.prototype.decrement = function () {
        this.currentValue -= 1;
        if (this.currentValue <= this.minimum) {
            this.currentValue = this.minimum;
        }
        this.setValue(this.currentValue);
    };
    PointTracker.prototype.increment = function () {
        this.currentValue += 1;
        if (this.currentValue >= this.maximum) {
            this.currentValue = this.maximum;
        }
        this.setValue(this.currentValue);
    };
    PointTracker.prototype.render = function () {
        var _this = this;
        return (h("div", { class: "container" }, h("h2", null, this.title), h("editable-number", { startingValue: this.currentValue }), this.showIncrementors ?
            h("div", { class: "button-container" }, h("button", { class: "button-left", onClick: function () { return _this.decrement(); } }, "-"), h("button", { class: "button-right", onClick: function () { return _this.increment(); } }, "+"))
            :
                ""));
    };
    Object.defineProperty(PointTracker, "is", {
        get: function () { return "point-tracker"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointTracker, "properties", {
        get: function () {
            return {
                "currentValue": {
                    "state": true
                },
                "el": {
                    "elementRef": true
                },
                "isEditable": {
                    "state": true
                },
                "maximum": {
                    "type": Number,
                    "attr": "maximum",
                    "watchCallbacks": ["setMaximum"]
                },
                "minimum": {
                    "type": Number,
                    "attr": "minimum"
                },
                "showIncrementors": {
                    "type": Boolean,
                    "attr": "show-incrementors"
                },
                "title": {
                    "type": String,
                    "attr": "title"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointTracker, "listeners", {
        get: function () {
            return [{
                    "name": "rpg_resetvalue",
                    "method": "resetCounter"
                }, {
                    "name": "rpg_setvalue",
                    "method": "setValueFromEvent"
                }, {
                    "name": "keyup.escape",
                    "method": "closeEditor"
                }, {
                    "name": "keyup.enter",
                    "method": "closeEditor"
                }, {
                    "name": "valueChanged",
                    "method": "valueChanged"
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointTracker, "style", {
        get: function () { return "/**style-placeholder:point-tracker:**/"; },
        enumerable: true,
        configurable: true
    });
    return PointTracker;
}());
var Wallet = /** @class */ (function () {
    function Wallet() {
        this.currencies = [
            'GP',
            'SP',
            'PP',
            'EP',
            'CP',
        ];
        this.currencyValues = [
            0,
            0,
            0,
            0,
            0
        ];
    }
    Wallet.prototype.setCurrencyValue = function (nameOrIndex, value) {
        var pos;
        if (Number.isInteger(nameOrIndex)) {
            pos = nameOrIndex;
        }
        else {
            pos = this.currencies.indexOf(nameOrIndex);
        }
        if (pos < 0) {
            return;
        }
        this.currentCurrencyValues = this.currentCurrencyValues.map(function (v, idx) {
            if (idx === pos) {
                return value;
            }
            return v;
        });
    };
    Wallet.prototype.valueChanged = function (ev) {
        var targetEl = ev.target;
        var index = targetEl.getAttribute('data-index');
        this.setCurrencyValue(parseInt(index), ev.detail);
        console.log(this.currentCurrencyValues);
    };
    Wallet.prototype.componentWillLoad = function () {
        this.currentCurrencyValues = this.currencyValues;
    };
    Wallet.prototype.render = function () {
        var _this = this;
        return (h("div", { class: "wallet-container" }, this.currencies.map(function (currency, index) { return h("div", { class: "currency" }, h("span", { class: "currency-name" }, currency), h("span", { class: "currency-value" }, h("editable-number", { "data-index": index, "starting-value": _this.currentCurrencyValues[index] }))); })));
    };
    Object.defineProperty(Wallet, "is", {
        get: function () { return "rpg-wallet"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wallet, "properties", {
        get: function () {
            return {
                "currencies": {
                    "type": "Any",
                    "attr": "currencies"
                },
                "currencyValues": {
                    "type": "Any",
                    "attr": "currency-values"
                },
                "currentCurrencyValues": {
                    "state": true
                },
                "setCurrencyValue": {
                    "method": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wallet, "listeners", {
        get: function () {
            return [{
                    "name": "valueChanged",
                    "method": "valueChanged"
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Wallet, "style", {
        get: function () { return "/**style-placeholder:rpg-wallet:**/"; },
        enumerable: true,
        configurable: true
    });
    return Wallet;
}());
export { CharacterAttribute, CharacterSkill, DeathSavingThrow, MyApp, PointTracker, Wallet as RpgWallet };
