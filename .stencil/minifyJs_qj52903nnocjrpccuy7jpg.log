const e=window.App.h;class t{constructor(){this.isEditable=!1}setValueEvent(e){e.detail&&this.setValue(e.detail)}closeEditor(){this.isEditable&&(this.isEditable=!1)}componentWillLoad(){this.currentValue=this.startingValue}svChange(e){this.setValue(e,!1)}setValue(e,t=!0){this.currentValue=parseInt(e),t&&this.valueChanged.emit(this.currentValue)}clickToEdit(e){"INPUT"!=e.target.tagName&&(this.isEditable=!this.isEditable,this.isEditable&&setTimeout(()=>{this.el.querySelector("input").focus()},0))}render(){return e("div",{class:"editable-number-container",onClick:e=>this.clickToEdit(e)},this.isEditable?e("input",{class:"enter-counter-value",value:this.currentValue,onChange:e=>this.setValue(e.target.value)}):e("span",{id:"counterValue",class:"counter-value"},this.currentValue))}static get is(){return"editable-number"}static get properties(){return{currentValue:{state:!0},el:{elementRef:!0},isEditable:{state:!0},startingValue:{type:Number,attr:"starting-value",watchCallbacks:["svChange"]}}}static get events(){return[{name:"valueChanged",method:"valueChanged",bubbles:!0,cancelable:!0,composed:!0}]}static get listeners(){return[{name:"rpg_setvalue",method:"setValueEvent"},{name:"keyup.escape",method:"closeEditor"},{name:"keyup.enter",method:"closeEditor"},{name:"closeEditor",method:"closeEditor"}]}static get style(){return"/**style-placeholder:editable-number:**/"}}export{t as EditableNumber};